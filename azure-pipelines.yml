# Surge synth build script
# https://aka.ms/yaml

trigger:
- master

jobs:
- job: Build
  strategy:
    matrix:
      mac:
        imageName: 'macos-10.13'
        isMac: true
      windows:
        imageName: 'vs2017-win2016'
        isWindows: true

  pool:
    vmImage: $(imageName)

  steps:
  - checkout: none

  - task: DownloadSecureFile@1
    inputs:
      secureFile: get-vst2.sh

  - bash: |
      set -e
      ls -alFh $AGENT_TEMPDIRECTORY
      . $AGENT_TEMPDIRECTORY/get-vst2.sh
      echo "VST2SDK_DIR=$VST2SDK_DIR"
    displayName: Get VST 2 SDK

  - bash: |
      set -e
      # get the surge code
      git clone --depth 1 https://github.com/surge-synthesizer/surge.git $AGENT_TEMPDIRECTORY/surge
      mv $AGENT_TEMPDIRECTORY/surge/.git .
      git reset --hard HEAD
      git submodule update --init --recursive

      export SURGE_VERSION=$(cat VERSION)
      echo "SURGE_VERSION=$SURGE_VERSION"
      echo "##vso[task.setvariable variable=SURGE_VERSION]$SURGE_VERSION"
      echo "##vso[task.setvariable variable=SURGE_VERSION;isOutput=true]$SURGE_VERSION"
    name: surge
    displayName: Submodule init

  - bash: |
      set -e
      pushd $AGENT_TEMPDIRECTORY
      export PREMAKE_MAC=https://github.com/premake/premake-core/releases/download/v5.0.0-alpha13/premake-5.0.0-alpha13-macosx.tar.gz
      curl -L $PREMAKE_MAC --output premake5.tar.gz
      tar zxvf premake5.tar.gz
      popd

      export PATH=$AGENT_TEMPDIRECTORY:$PATH
      ./build-osx.sh --build --verbose
      ls -alFh target
      ls -alFh products
    condition: variables.isMac
    displayName: Build macOS releases

  - task: NuGetToolInstaller@0
    condition: variables.isWindows
    displayName: NuGet

  - bash: |
      set -e
      pushd $AGENT_TEMPDIRECTORY
      export PREMAKE_WINDOWS=https://github.com/premake/premake-core/releases/download/v5.0.0-alpha13/premake-5.0.0-alpha13-windows.zip
      curl -L $PREMAKE_WINDOWS --output premake5.zip
      unzip premake5.zip
      popd

      export PATH=$AGENT_TEMPDIRECTORY:$PATH
      premake5 vs2017
      ls -alFh

      # need this because MSBuild.restoreNugetPackages: true fails
      nuget restore .
    condition: variables.isWindows
    displayName: Setup Windows Project

  - task: MSBuild@1
    inputs:
      solution: 'buildtask.xml'
      maximumCpuCount: true
      # restoreNugetPackages: true
    condition: variables.isWindows
    displayName: Build Windows

  - bash: |
      set -e
      nuget install chocolatey
      choco install innosetup version=5.6.1 -y
      iscc installer_win/surge.iss
    condition: variables.isWindows
    displayName: Make Windows installer

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_WIN_EXE'
      targetPath: 'installer_win/Output'
    condition: variables.isWindows
    displayName: Publish Windows installer

  - bash: |
      set -e
      echo "VST2SDK_DIR=$VST2SDK_DIR"
      echo "SURGE_VERSION=$SURGE_VERSION"
      pushd installer_mac
      ./make_installer.sh $SURGE_VERSION --dmg
      rm *.pkg
      popd
    condition: variables.isMac
    displayName: Make macOS installer

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_MAC_DMG'
      targetPath: 'installer_mac/installer'
    condition: variables.isMac
    displayName: Publish macOS DMG

- job: Release
  dependsOn: Build
  condition: succeeded()
  variables:
    SURGE_VERSION: $[ dependencies.Build.outputs['mac.surge.SURGE_VERSION'] ]
    GITHUB_TOKEN: $(github-access-token)

  steps:
  - checkout: self
    # fetchDepth: 1

  - task: DownloadSecureFile@1
    inputs:
      secureFile: surge.id_rsa

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_MAC_DMG'
      targetPath: $(System.DefaultWorkingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_WIN_EXE'
      targetPath: $(System.DefaultWorkingDirectory)

  - bash: |
      set -e
      set -x

      if [ "$(git log -1 --pretty=format:'%an')" == "build-bot" ]; then
        exit 0
      fi

      ls -alFh
      echo "SURGE_VERSION: $SURGE_VERSION"

      rm -rf releases
      mkdir -p releases
      mv *.exe releases
      mv *.dmg releases

      export NOW="$(date +%Y-%m-%d)"

      # copy macOS DMG installer
      if [ -f "$(ls releases/*.dmg)" ]; then
        export DMG="$(basename $(ls releases/*.dmg))"
        export MACOS_LINK="[macOS 64-bit AU/VST/VST3](releases/download/$SURGE_VERSION/$DMG) - $NOW"
      fi

      # copy windows installer
      if [ -f "$(ls releases/*.exe)" ]; then
        export EXE="$(basename $(ls releases/*.exe))"
        export WINDOWS_LINK="[Windows 64-bit VST/VST3](releases/download/$SURGE_VERSION/$EXE) - $NOW"
      fi

      # basic git config / setup
      git config --global user.name "build-bot"
      git config --global user.email "build-bot@localhost"

      # setup git ssh command to use the key
      ls $AGENT_TEMPDIRECTORY
      chmod 400 $AGENT_TEMPDIRECTORY/surge.id_rsa
      export GIT_SSH_COMMAND="ssh -oStrictHostKeyChecking=no -i $AGENT_TEMPDIRECTORY/surge.id_rsa"

      # perform GH release
      curl -L https://github.com/tcnksm/ghr/releases/download/v0.12.0/ghr_v0.12.0_linux_amd64.tar.gz --output ghr.tar.gz
      tar zxvf ghr.tar.gz
      ls -l
      ghr_v0.12.0_linux_amd64/ghr -replace $SURGE_VERSION releases

      echo << EOF > README.md
      # Surge Synthesizer Releases
      Synthesizer plug-in (previously released as Vember Audio Surge)
      [![Build Status](https://dev.azure.com/surge-synthesizer/surge/_apis/build/status/surge-synthesizer.releases?branchName=master)](https://dev.azure.com/surge-synthesizer/surge/_build/latest?definitionId=1?branchName=master)
      ## Download Surge Installers
      * $MACOS_LINK
      * $WINDOWS_LINK
      EOF

      # commit changes
      git checkout master
      git add README.md
      # git add releases
      git status
      git commit -m "Release to $SURGE_VERSION"
      git remote set-url origin git@github.com:surge-synthesizer/releases.git
      git push
      git status

      # we could bump the version
      export SURGE_VERSION_MAJ=$(echo $SURGE_VERSION | cut -f1 -d.)
      export SURGE_VERSION_MIN=$(echo $SURGE_VERSION | cut -f2 -d.)
      # echo $SURGE_VERSION_MAJ
      ((SURGE_VERSION_MIN++))
      # echo $SURGE_VERSION_MIN
      export NEXT_SURGE_VERSION="$SURGE_VERSION_MAJ.$SURGE_VERSION_MIN"
      echo "Next version?: $NEXT_SURGE_VERSION"
      echo "$NEXT_SURGE_VERSION" > VERSION
    displayName: Perform Release
