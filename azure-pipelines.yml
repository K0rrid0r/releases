# Surge synth build script
# https://aka.ms/yaml

trigger:
  branches:
    exclude:
    - master

jobs:
- job: Build
  strategy:
    matrix:
      mac:
        imageName: 'macos-10.13'
        isMac: true
      windows:
        imageName: 'vs2017-win2016'
        isWindows: true

  pool:
    vmImage: $(imageName)

  steps:
  - checkout: none

  - task: DownloadSecureFile@1
    inputs:
      secureFile: get-vst2.sh

  - bash: |
      set -e
      ls -alFh $AGENT_TEMPDIRECTORY
      . $AGENT_TEMPDIRECTORY/get-vst2.sh
      echo "VST2SDK_DIR=$VST2SDK_DIR"
    displayName: Get VST 2 SDK

  - bash: |
      set -e
      # get the surge code
      git clone --depth 1 https://github.com/surge-synthesizer/surge.git $AGENT_TEMPDIRECTORY/surge
      mv $AGENT_TEMPDIRECTORY/surge/.git .

      if [ "$SURGE_BRANCH" == "" ]; then
        export SURGE_BRANCH=master
      fi
      echo "SURGE_BRANCH: $SURGE_BRANCH"
      export SURGE_VERSION=${SURGE_BRANCH##/*/}
      if [ "$SURGE_VERSION" == ""]; then
        export SURGE_VERSION=master
      fi
      echo "SURGE_VERSION=$SURGE_VERSION"

      git checkout $SURGE_BRANCH

      git status

      git reset --hard HEAD
      git submodule update --init --recursive

      echo $SURGE_VERSION > VERSION

      export SURGE_VERSION=$(cat VERSION)
      echo "SURGE_VERSION=$SURGE_VERSION"
      echo "##vso[task.setvariable variable=SURGE_VERSION]$SURGE_VERSION"
      echo "##vso[task.setvariable variable=SURGE_VERSION;isOutput=true]$SURGE_VERSION"
    name: surge
    displayName: Submodule init

  - bash: |
      set -e
      pushd $AGENT_TEMPDIRECTORY
      export PREMAKE_MAC=https://github.com/premake/premake-core/releases/download/v5.0.0-alpha13/premake-5.0.0-alpha13-macosx.tar.gz
      curl -L $PREMAKE_MAC --output premake5.tar.gz
      tar zxvf premake5.tar.gz
      popd

      export PATH=$AGENT_TEMPDIRECTORY:$PATH
      ./build-osx.sh --build --verbose
      ls -alFh target
      ls -alFh products
    condition: variables.isMac
    displayName: Build macOS releases

  - task: NuGetToolInstaller@0
    condition: variables.isWindows
    displayName: NuGet

  - bash: |
      set -e
      pushd $AGENT_TEMPDIRECTORY
      export PREMAKE_WINDOWS=https://github.com/premake/premake-core/releases/download/v5.0.0-alpha13/premake-5.0.0-alpha13-windows.zip
      curl -L $PREMAKE_WINDOWS --output premake5.zip
      unzip premake5.zip
      popd

      export PATH=$AGENT_TEMPDIRECTORY:$PATH
      premake5 vs2017
      ls -alFh

      # need this because MSBuild.restoreNugetPackages: true fails
      nuget restore .
    condition: variables.isWindows
    displayName: Setup Windows Project

  - task: MSBuild@1
    inputs:
      solution: 'buildtask.xml'
      maximumCpuCount: true
      # restoreNugetPackages: true
    condition: variables.isWindows
    displayName: Build Windows

  - bash: |
      set -e
      nuget install chocolatey
      choco install innosetup --version=5.6.1 -y
      iscc installer_win/surge.iss
    condition: variables.isWindows
    displayName: Make Windows installer

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_WIN_EXE'
      targetPath: 'installer_win/Output'
    condition: variables.isWindows
    displayName: Publish Windows installer

  - bash: |
      set -e
      echo "VST2SDK_DIR=$VST2SDK_DIR"
      echo "SURGE_VERSION=$SURGE_VERSION"
      pushd installer_mac
      ./make_installer.sh $SURGE_VERSION --dmg
      rm -f *.pkg
      popd
    condition: variables.isMac
    displayName: Make macOS installer

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_MAC_DMG'
      targetPath: 'installer_mac/installer'
    condition: variables.isMac
    displayName: Publish macOS DMG

- job: Release
  dependsOn: Build
  condition: succeeded()
  variables:
    SURGE_VERSION: $[ dependencies.Build.outputs['mac.surge.SURGE_VERSION'] ]

  steps:
  - checkout: self

  - task: DownloadSecureFile@1
    inputs:
      secureFile: surge-build-bot.sh

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_MAC_DMG'
      targetPath: $(System.DefaultWorkingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_WIN_EXE'
      targetPath: $(System.DefaultWorkingDirectory)

  - bash: |
      set -e
      set -x

      echo "SURGE_VERSION: $SURGE_VERSION"

      if ! [[ $SURGE_BRANCH =~ ^(master|release/.+)$ ]]; then
        exit 1
      fi

      mkdir -p releases
      mv *.exe releases
      mv *.dmg releases

      # perform GH release
      . $AGENT_TEMPDIRECTORY/surge-build-bot.sh
      curl -L https://github.com/tcnksm/ghr/releases/download/v0.12.0/ghr_v0.12.0_linux_amd64.tar.gz --output ghr.tar.gz
      tar zxvf ghr.tar.gz
      if [ "$SURGE_VERSION" == "master" ]; then
        export PRE="-prerelease"
      fi
      ghr_v0.12.0_linux_amd64/ghr $PRE -recreate $SURGE_VERSION releases
    displayName: Perform Release
